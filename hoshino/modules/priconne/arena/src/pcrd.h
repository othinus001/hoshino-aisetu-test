#ifndef PCRD_H_GENERATED_
#define PCRD_H_GENERATED_
/* Automically generated by wasm2c */
#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>

#include "wasm-rt.h"

#ifndef WASM_RT_MODULE_PREFIX
#define WASM_RT_MODULE_PREFIX
#endif

#define WASM_RT_PASTE_(x, y) x ## y
#define WASM_RT_PASTE(x, y) WASM_RT_PASTE_(x, y)
#define WASM_RT_ADD_PREFIX(x) WASM_RT_PASTE(WASM_RT_MODULE_PREFIX, x)

/* TODO(binji): only use stdint.h types in header */
typedef uint8_t u8;
typedef int8_t s8;
typedef uint16_t u16;
typedef int16_t s16;
typedef uint32_t u32;
typedef int32_t s32;
typedef uint64_t u64;
typedef int64_t s64;
typedef float f32;
typedef double f64;

extern void WASM_RT_ADD_PREFIX(init)(void);

/* import: 'wasi_unstable' 'fd_write' */
extern u32 (*Z_wasi_unstableZ_fd_writeZ_iiiii)(u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueCall' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueCallZ_viiiiiiiii)(u32, u32, u32, u32, u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueGet' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueGetZ_viiiiii)(u32, u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueIndex' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueIndexZ_viiiii)(u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueNew' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueNewZ_viiiiiii)(u32, u32, u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueSet' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueSetZ_viiiiii)(u32, u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueSetIndex' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueSetIndexZ_viiiii)(u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.stringVal' */
extern void (*Z_envZ_syscallZ2FjsZ2EstringValZ_viiiii)(u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueLength' */
extern u32 (*Z_envZ_syscallZ2FjsZ2EvalueLengthZ_iiii)(u32, u32, u32);
/* import: 'env' 'syscall/js.valuePrepareString' */
extern void (*Z_envZ_syscallZ2FjsZ2EvaluePrepareStringZ_viiii)(u32, u32, u32, u32);
/* import: 'env' 'syscall/js.valueLoadString' */
extern void (*Z_envZ_syscallZ2FjsZ2EvalueLoadStringZ_viiiiii)(u32, u32, u32, u32, u32, u32);
/* import: 'env' 'syscall/js.finalizeRef' */
extern void (*Z_envZ_syscallZ2FjsZ2EfinalizeRefZ_viii)(u32, u32, u32);

/* export: 'memory' */
extern wasm_rt_memory_t (*WASM_RT_ADD_PREFIX(Z_memory));
/* export: '__wasm_call_ctors' */
extern void (*WASM_RT_ADD_PREFIX(Z___wasm_call_ctorsZ_vv))(void);
/* export: 'memcpy' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_memcpyZ_iiii))(u32, u32, u32);
/* export: 'memmove' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_memmoveZ_iiii))(u32, u32, u32);
/* export: 'memset' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_memsetZ_iiii))(u32, u32, u32);
/* export: 'runtime.stackChainStart' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_runtimeZ2EstackChainStartZ_i));
/* export: '_start' */
extern void (*WASM_RT_ADD_PREFIX(Z__startZ_vv))(void);
/* export: '__heap_base' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___heap_baseZ_i));
/* export: 'runtime.trackedGlobalsLength' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_runtimeZ2EtrackedGlobalsLengthZ_i));
/* export: 'runtime.trackedGlobalsBitmap.328' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_runtimeZ2EtrackedGlobalsBitmapZ2E328Z_i));
/* export: 'runtime.trackedGlobalsStart' */
extern u32 (*WASM_RT_ADD_PREFIX(Z_runtimeZ2EtrackedGlobalsStartZ_i));
/* export: 'go_scheduler' */
extern void (*WASM_RT_ADD_PREFIX(Z_go_schedulerZ_vv))(void);
/* export: 'resume' */
extern void (*WASM_RT_ADD_PREFIX(Z_resumeZ_vv))(void);
/* export: 'command-line-arguments.main' */
extern void (*WASM_RT_ADD_PREFIX(Z_commandZ2DlineZ2DargumentsZ2EmainZ_vii))(u32, u32);
/* export: '__dso_handle' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___dso_handleZ_i));
/* export: '__data_end' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___data_endZ_i));
/* export: '__global_base' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___global_baseZ_i));
/* export: '__memory_base' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___memory_baseZ_i));
/* export: '__table_base' */
extern u32 (*WASM_RT_ADD_PREFIX(Z___table_baseZ_i));
#ifdef __cplusplus
}
#endif

#endif  /* PCRD_H_GENERATED_ */
